# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: nandos-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

#####################
# Local Development #
#####################
# Uncomment this plugin to use a local version of AWS Lambda and API Gateway
plugins:
  - serverless-offline
  - jsonwebtoken

custom: ${file(stage_variables/${opt:stage, self:provider.stage}.yaml)}

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
  stage: dev
  region: eu-west-2

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true
  exclude:
  - functions/**
  - stage_variables/**

functions:
  login_auth0:
    handler: functions/function_login_auth0/handler_login.login
    package:
      include:
      - functions/function_login_auth0/*
    environment:
      IDENTITY_PROVIDER_HOST: ${self:custom.auth0-host}
      IDENTITY_PROVIDER_API_PORT: ${self:custom.auth0-api-port}
      IDENTITY_PROVIDER_CLIENT_ID: ${self:custom.auth0-client-id}
      IDENTITY_PROVIDER_OAUTH_API: ${self:custom.auth0-oauth-api}
    events:
    - http:
        path: singleidentity/v0/login
        method: post
        integration: lambda
        cors: true
        request:
          application/json: '{"username" : "$input.params("username")","password": "$input.params("password")"}'
  login_janrain:
    handler: functions/function_login_janrain/handler_login.login
    package:
      include:
      - functions/function_login_janrain/*
    environment:
      IDENTITY_PROVIDER_HOST: ${self:custom.janrain-host}
      IDENTITY_PROVIDER_API_PORT: ${self:custom.janrain-api-port}
      IDENTITY_PROVIDER_CLIENT_ID: ${self:custom.janrain-client-id}
      IDENTITY_PROVIDER_OAUTH_API: ${self:custom.janrain-oauth-api}
    events:
    - http:
        path: singleidentity/v1/login
        method: post
        integration: lambda
        cors: true
        request:
          application/json: '{"username" : "$input.params("username")","password": "$input.params("password")"}'
  static_login:
      handler: functions/function_static_login/handler_static_login.login
      package:
        include:
        - functions/function_static_login/*
      events:
      - http:
          path: singleidentity/v0/static_login
          method: post
          integration: lambda
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
